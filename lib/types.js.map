{
  "version": 3,
  "file": "types.js",
  "sourceRoot": "..",
  "sources": [
    "src/types.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,SAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,SAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAsC,MAAM,CAAC,OAA7C,EAR5B;;;EAWA,IAAC,CAAA,OAAD,CAAS,wBAAT,EACE;IAAA,KAAA,EACE;MAAA,eAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAqB,CAArB;MAAT,CAA1C;MACA,uBAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,OAAD,CAAqB,CAArB,EAAwB,WAAxB;MAAT,CAD1C;;;MAIA,gCAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,SAArB;MAAT,CAJ1C;MAKA,+BAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAM,iBAAN,CAAA,IAA0B,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,OAArB;MAAnC,CAL1C;MAMA,iCAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAM,mBAAN,CAAA,IAA0B,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,SAArB;MAAnC,CAN1C;MAOA,mCAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAM,qBAAN,CAAA,IAA0B,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,WAArB;MAAnC;IAP1C;EADF,CADF,EAXA;;;EAuBA,IAAC,CAAA,OAAD,CAAS,iBAAT,EACE;IAAA,KAAA,EACE;MAAA,eAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAqB,CAArB;MAAT,CAA1C;MACA,iBAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,OAAD,CAAqB,CAArB,EAAwB,KAAxB;MAAT,CAD1C;MAEA,iBAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,OAAD,CAAqB,CAArB,EAAwB,KAAxB;MAAT,CAF1C;MAGA,kBAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,OAAD,CAAqB,CAArB,EAAwB,MAAxB;MAAT,CAH1C;MAIA,0BAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAqB,CAAC,CAAC,GAAvB;MAAT,CAJ1C;MAKA,0BAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAqB,CAAC,CAAC,GAAvB;MAAT,CAL1C;MAMA,8BAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS;MAAT;IAN1C;EADF,CADF;;EAvBA;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nintertype                 = new ( require 'intertype' ).Intertype module.exports\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mirage_create_settings',\n  tests:\n    \"x is a object\":                          ( x ) -> @isa.object          x\n    \"x has key 'file_path'\":                  ( x ) -> @has_key             x, 'file_path'\n    # \"x has key 'db_path'\":                    ( x ) -> @has_key             x, 'db_path'\n    # \"x has key 'icql_path'\":                  ( x ) -> @has_key             x, 'icql_path'\n    \"x.file_path is a nonempty text\":         ( x ) -> @isa.nonempty_text x.file_path\n    \"x.db_path is a ?nonempty text\":          ( x ) -> ( not x.db_path?     ) or @isa.nonempty_text x.db_path\n    \"x.icql_path is a ?nonempty text\":        ( x ) -> ( not x.icql_path?   ) or @isa.nonempty_text x.icql_path\n    \"x.default_key is a ?nonempty text\":      ( x ) -> ( not x.default_key? ) or @isa.nonempty_text x.default_key\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mirage_main_row',\n  tests:\n    \"x is a object\":                          ( x ) -> @isa.object          x\n    \"x has key 'key'\":                        ( x ) -> @has_key             x, 'key'\n    \"x has key 'vnr'\":                        ( x ) -> @has_key             x, 'vnr'\n    \"x has key 'text'\":                       ( x ) -> @has_key             x, 'text'\n    \"x.key is a nonempty text\":               ( x ) -> @isa.nonempty_text   x.key\n    \"x.vnr is a nonempty text\":               ( x ) -> @isa.nonempty_text   x.vnr\n    \"x.vnr starts, ends with '[]'\":           ( x ) -> ( x.vnr.match /^\\[.*\\]$/ )?\n    # \"x.vnr is a JSON array of integers\":      ( x ) ->\n    #   lst = JSON.parse x.vnr\n    #   return false unless @isa.list lst\n    #   return lst.every ( xx ) => @isa.integer xx\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'true', ( x ) -> x is true\n\n"
  ]
}