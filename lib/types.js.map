{
  "version": 3,
  "file": "types.js",
  "sourceRoot": "..",
  "sources": [
    "src/types.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,SAAA,GAA4B,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC;;EACpD,SAAA,GAA4B,IAAI,SAAJ,CAAc,MAAM,CAAC,OAArB,EAhB5B;;;EAmBA,IAAC,CAAA,OAAD,CAAS,iBAAT,EACE;IAAA,KAAA,EACE;MAAA,eAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAqB,CAArB;MAAT,CAA1C;MACA,iBAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,OAAD,CAAqB,CAArB,EAAwB,KAAxB;MAAT,CAD1C;MAEA,qBAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,OAAD,CAAqB,CAArB,EAAwB,SAAxB;MAAT,CAF1C;MAGA,mBAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,OAAD,CAAqB,CAArB,EAAwB,OAAxB;MAAT,CAH1C;MAIA,0BAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAqB,CAAC,CAAC,GAAvB;MAAT,CAJ1C;MAKA,8BAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAqB,CAAC,CAAC,OAAvB;MAAT,CAL1C;MAMA,kCAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS;MAAT,CAN1C;MAOA,uCAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;AACxC,YAAA;QAAA,GAAA,GAAM,IAAI,CAAC,KAAL,CAAW,CAAC,CAAC,OAAb;QACN,IAAA,CAAoB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,GAAV,CAApB;AAAA,iBAAO,MAAP;;AACA,eAAO,GAAG,CAAC,KAAJ,CAAU,CAAE,EAAF,CAAA,GAAA;iBAAU,IAAC,CAAA,GAAG,CAAC,gBAAL,CAAsB,EAAtB;QAAV,CAAV;MAHiC;IAP1C;EADF,CADF;;EAnBA;;AAAA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-PARSER/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mirage_main_row',\n  tests:\n    \"? is a object\":                          ( x ) -> @isa.object          x\n    \"? has key 'key'\":                        ( x ) -> @has_key             x, 'key'\n    \"? has key 'vnr_txt'\":                    ( x ) -> @has_key             x, 'vnr_txt'\n    \"? has key 'value'\":                      ( x ) -> @has_key             x, 'value'\n    \"?.key is a nonempty text\":               ( x ) -> @isa.nonempty_text   x.key\n    \"?.vnr_txt is a nonempty text\":           ( x ) -> @isa.nonempty_text   x.vnr_txt\n    \"?.vnr_txt starts, ends with '[]'\":       ( x ) -> ( x.vnr_txt.match /^\\[.*\\]$/ )?\n    \"?.vnr_txt is a JSON array of integers\":  ( x ) ->\n      lst = JSON.parse x.vnr_txt\n      return false unless @isa.list lst\n      return lst.every ( xx ) => @isa.positive_integer xx\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'true', ( x ) -> x is true\n\n"
  ]
}