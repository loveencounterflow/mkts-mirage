// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, Intertype, alert, badge, debug, help, info, intertype, jr, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS-PARSER/TYPES';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  jr = JSON.stringify;

  Intertype = (require('intertype')).Intertype;

  intertype = new Intertype(module.exports);

  //-----------------------------------------------------------------------------------------------------------
  this.declare('mirage_main_row', {
    tests: {
      "? is a object": function(x) {
        return this.isa.object(x);
      },
      "? has key 'key'": function(x) {
        return this.has_key(x, 'key');
      },
      "? has key 'vlnr_txt'": function(x) {
        return this.has_key(x, 'vlnr_txt');
      },
      "? has key 'value'": function(x) {
        return this.has_key(x, 'value');
      },
      "?.key is a nonempty text": function(x) {
        return this.isa.nonempty_text(x.key);
      },
      "?.vlnr_txt is a nonempty text": function(x) {
        return this.isa.nonempty_text(x.vlnr_txt);
      },
      "?.vlnr_txt starts, ends with '[]'": function(x) {
        return (x.vlnr_txt.match(/^\[.*\]$/)) != null;
      },
      "?.vlnr_txt is a JSON array of integers": function(x) {
        var lst;
        // debug 'Âµ55589', x
        return (this.isa.list((lst = JSON.parse(x.vlnr_txt)))) && (lst.every((xx) => {
          return (this.isa.integer(xx)) && (this.isa.positive(xx));
        }));
      }
    }
  });

  // #-----------------------------------------------------------------------------------------------------------
// @declare 'true', ( x ) -> x is true

}).call(this);

//# sourceMappingURL=types.js.map
