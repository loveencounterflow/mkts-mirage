// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, badge, debug, intertype, rpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS-MIRAGE/TYPES';

  debug = CND.get_logger('debug', badge);

  intertype = new (require('intertype')).Intertype(module.exports);

  //-----------------------------------------------------------------------------------------------------------
  this.declare('mirage_create_settings', {
    tests: {
      "x is a object": function(x) {
        return this.isa.object(x);
      },
      "x has key 'file_path'": function(x) {
        return this.has_key(x, 'file_path');
      },
      // "x has key 'db_path'":                    ( x ) -> @has_key             x, 'db_path'
      // "x has key 'icql_path'":                  ( x ) -> @has_key             x, 'icql_path'
      "x.file_path is a nonempty text": function(x) {
        return this.isa.nonempty_text(x.file_path);
      },
      "x.db_path is a ?nonempty text": function(x) {
        return (x.db_path == null) || this.isa.nonempty_text(x.db_path);
      },
      "x.icql_path is a ?nonempty text": function(x) {
        return (x.icql_path == null) || this.isa.nonempty_text(x.icql_path);
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('mirage_main_row', {
    tests: {
      "x is a object": function(x) {
        return this.isa.object(x);
      },
      "x has key 'key'": function(x) {
        return this.has_key(x, 'key');
      },
      "x has key 'vnr_txt'": function(x) {
        return this.has_key(x, 'vnr_txt');
      },
      "x has key 'value'": function(x) {
        return this.has_key(x, 'value');
      },
      "x.key is a nonempty text": function(x) {
        return this.isa.nonempty_text(x.key);
      },
      "x.vnr_txt is a nonempty text": function(x) {
        return this.isa.nonempty_text(x.vnr_txt);
      },
      "x.vnr_txt starts, ends with '[]'": function(x) {
        return (x.vnr_txt.match(/^\[.*\]$/)) != null;
      },
      "x.vnr_txt is a JSON array of integers": function(x) {
        var lst;
        lst = JSON.parse(x.vnr_txt);
        if (!this.isa.list(lst)) {
          return false;
        }
        return lst.every((xx) => {
          return this.isa.positive_integer(xx);
        });
      }
    }
  });

  // #-----------------------------------------------------------------------------------------------------------
// @declare 'true', ( x ) -> x is true

}).call(this);

//# sourceMappingURL=types.js.map
