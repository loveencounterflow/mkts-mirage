{
  "version": 3,
  "file": "demo-expanding-lines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo-expanding-lines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/EXPERIMENTS/EXPANDING-LINES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n{ assign\n  jr }                    = CND\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\ntypes                     = require '../types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n{ assign\n  abspath\n  relpath }               = require '../helpers'\n#...........................................................................................................\nrequire                   '../exception-handler'\nMIRAGE                    = require '../..'\ndo_validate               = true\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( P ... ) ->\n  R           = PD.thaw PD.new_datom P...\n  R.vnr_txt   = ( jr R.$vnr ) if ( not R.vnr_txt )? and ( R.$vnr? )\n  R.$fresh    = true\n  return PD.freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_vnr_level = ( S, vnr ) ->\n  ### Given a `mirage` instance and a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has an index of `0` appended, thus representing the pre-first `vnr` for a level of lines\n  derived from the one that the original `vnr` pointed to. ###\n  validate.nonempty_list vnr\n  R = assign [], vnr\n  R.push 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@advance_vnr = ( S, vnr ) ->\n  ### Given a `mirage` instance and a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the\n  next line in the same level that is derived from the same line as its predecessor. ###\n  validate.nonempty_list vnr\n  R                    = assign [], vnr\n  R[ vnr.length - 1 ] += +1\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_words = ( S ) -> $ ( d, send ) =>\n  return send d unless select d, '^mktscript'\n  #.........................................................................................................\n  send PD.stamp d\n  text      = d.text\n  prv_vnr   = d.$vnr\n  nxt_vnr  = @new_vnr_level S, prv_vnr\n  #.........................................................................................................\n    # unless isa.blank_text row.value\n  for word in text.split /\\s+/\n    continue if word is ''\n    nxt_vnr = @advance_vnr S, nxt_vnr\n    send @new_datom '^word', { text: word, $vnr: nxt_vnr, }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_row = ( S, row ) ->\n  ### TAINT how to convert vnr in ICQL? ###\n  vnr_txt     = row.vnr_txt\n  $vnr        = JSON.parse vnr_txt\n  R           = PD.freeze PD.new_datom row.key, { text: row.value, $vnr, vnr_txt, }\n  R.$stamped  = true if row.stamped\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@row_from_datom = ( S, d ) ->\n  ### TAINT how to convert booleans in ICQL? ###\n  stamped   = if d.$stamped then 1 else 0\n  R         = PD.freeze { key: d.key, vnr_txt: d.vnr_txt, value: d.text, stamped, }\n  validate.mirage_main_row R if do_validate\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@feed_source = ( S, source, limit = Infinity ) ->\n  dbr = S.mirage.db\n  nr  = 0\n  #.........................................................................................................\n  for row from dbr.read_unstamped_lines()\n    nr += +1\n    break if nr > limit\n    source.send @datom_from_row S, row\n  #.........................................................................................................\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$feed_db = ( S ) ->\n  ### TAINT stopgap measure; should be implemented in ICQL ###\n  db2 = ( MIRAGE.new_mirage S.mirage ).db\n  return $watch ( d ) =>\n    ### TAINT how to convert vnr in ICQL? ###\n    row = @row_from_datom S, d\n    try\n      ### TAINT consider to use upsert instead https://www.sqlite.org/lang_UPSERT.html ###\n      if      d.$fresh then db2.insert row\n      else if d.$dirty then db2.update row\n    catch error\n      warn \"µ12133 when trying to insert or update row #{jr row}\"\n      warn \"µ12133 an error occurred:\"\n      warn \"µ12133 #{error.message}\"\n      throw error\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_$show = ( S ) -> $watch ( d ) =>\n  if d.$stamped then color = CND.grey\n  else\n    switch d.key\n      when '^word' then color = CND.gold\n      else color = CND.white\n  info color jr d\n\n#-----------------------------------------------------------------------------------------------------------\n@_$on_finish = ( S ) ->\n  dbr = S.mirage.db\n  #.........................................................................................................\n  return $watch { last, }, ( d ) =>\n    return null unless d is last\n    #.......................................................................................................\n    for row from dbr.read_lines { limit: 10, }\n      # debug 'µ10001', rpr row\n      color = if row.stamped then CND.grey else CND.green\n      key   = row.key.padEnd      12\n      vnr   = row.vnr_txt.padEnd  12\n      info color \"#{vnr} #{( if row.stamped then 'S' else ' ' )} #{key} #{rpr row.value[ .. 40 ]}\"\n    #.......................................................................................................\n    for row from dbr.get_stats()\n      info \"#{row.key}: #{row.count}\"\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@translate_document = ( me ) -> new Promise ( resolve, reject ) =>\n  ### TAINT add suitable types ###\n  validate.object me\n  S         = { mirage: me, }\n  source    = PD.new_push_source()\n  limit     = Infinity\n  #.........................................................................................................\n  pipeline  = []\n  pipeline.push source\n  pipeline.push @$split_words S\n  pipeline.push @$feed_db     S\n  # pipeline.push PD.$show()\n  # pipeline.push @_$show()\n  pipeline.push @_$on_finish  S\n  pipeline.push PD.$drain => resolve()\n  #.........................................................................................................\n  PD.pull pipeline...\n  @feed_source S, source, limit\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  testing = true\n  do =>\n    #.......................................................................................................\n    mirage = MIRAGE.new_mirage './README.md'\n    await MIRAGE.acquire      mirage\n    await @translate_document mirage\n    help 'ok'\n\n\n"
  ]
}