{
  "version": 3,
  "file": "demo-expanding-lines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo-expanding-lines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/EXPERIMENTS/EXPANDING-LINES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n{ assign\n  jr }                    = CND\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\ntypes                     = require '../types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n{ assign\n  abspath\n  relpath }               = require '../helpers'\n#...........................................................................................................\nrequire                   '../exception-handler'\nMIRAGE                    = require '../..'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_level = ( me, vlnr ) ->\n  ### Given a `mirage` instance and a vectorial line number `vlnr`, return a copy of `vlnr`, call it\n  `vlnr0`, which has an index of `0` appended, thus representing the pre-first `vlnr` for a level of lines\n  derived from the one that the original `vlnr` pointed to. Call `advance mirage, vlnr0` to obtain the\n  vectorial line number of the first line of the new level. ###\n  validate.nonempty_list vlnr\n  R = assign [], vlnr\n  R.push 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@advance = ( me, vlnr ) ->\n  ### Given a `mirage` instance and a vectorial line number `vlnr`, return a copy of `vlnr`, call it\n  `vlnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the\n  next line in the same level that is derived from the same line as its predecessor. ###\n  validate.nonempty_list vlnr\n  R                     = assign [], vlnr\n  R[ vlnr.length - 1 ] += +1\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_words = ( S ) -> $ ( d, send ) =>\n  return send d unless select d, '^mktscript'\n  { text, vlnr: prv_vlnr, } = d.value\n  nxt_vlnr = @new_level S.mirage, prv_vlnr\n    # unless isa.blank_text row.value\n  for word in text.split /\\s+/\n    continue if word is ''\n    nxt_vlnr = @advance S.mirage, nxt_vlnr\n    send PD.new_event '^word', { text: word, vlnr: nxt_vlnr, }\n  send stamp d\n\n#-----------------------------------------------------------------------------------------------------------\n@feed_source = ( S, source, limit = Infinity ) ->\n  dbr = S.mirage.db\n  nr  = 0\n  for row from dbr.read_unstamped_lines()\n    nr   += +1\n    break if nr > limit\n    ### TAINT how to convert vlnr in ICQL? ###\n    vlnr_txt  = row.vlnr\n    vlnr      = JSON.parse row.vlnr\n    source.send PD.new_event row.key, { text: row.value, vlnr, vlnr_txt, rowid: row.rowid, }\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$feed_db = ( S ) ->\n  ### TAINT stopgap measure; should be implemented in ICQL ###\n  db2 = ( MIRAGE.new_settings S.mirage ).db\n  return $watch ( d ) =>\n    return null unless d.stamped\n    ### TAINT how to convert vlnr in ICQL? ###\n    db2.stamp_line { vlnr: d.value.vlnr_txt, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_$show = ( S ) -> $watch ( d ) =>\n  if d.stamped then color = CND.grey\n  else\n    switch d.key\n      when '^word' then color = CND.gold\n      else color = CND.white\n  info color jr d\n\n#-----------------------------------------------------------------------------------------------------------\n@_$on_finish = ( S ) ->\n  dbr = S.mirage.db\n  #.........................................................................................................\n  return $watch { last, }, ( d ) =>\n    return null unless d is last\n    #.......................................................................................................\n    for row from dbr.read_lines()\n      color = if row.stamped then CND.grey else CND.green\n      key   = row.key.padEnd  12\n      vlnr  = row.vlnr.padEnd 12\n      info color \"#{vlnr} #{( if row.stamped then 'S' else ' ' )} #{key} #{rpr row.value[ .. 40 ]}\"\n      break if ( JSON.parse row.vlnr )[ 0 ] > 20\n    #.......................................................................................................\n    for row from dbr.get_stats()\n      info \"#{row.key}: #{row.count}\"\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@translate_document = ( me ) -> new Promise ( resolve, reject ) =>\n  ### TAINT add suitable types ###\n  validate.object me\n  S         = { mirage: me, }\n  source    = PD.new_push_source()\n  limit     = 12\n  #.........................................................................................................\n  pipeline  = []\n  pipeline.push source\n  pipeline.push @$split_words S\n  pipeline.push @$feed_db     S\n  pipeline.push @_$show()\n  pipeline.push @_$on_finish  S\n  pipeline.push PD.$drain => resolve()\n  #.........................................................................................................\n  PD.pull pipeline...\n  @feed_source S, source, limit\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  testing = true\n  do =>\n    #.......................................................................................................\n    mirage = MIRAGE.new_settings '../README.md'\n    await MIRAGE.acquire      mirage\n    await @translate_document mirage\n    help 'ok'\n\n\n"
  ]
}