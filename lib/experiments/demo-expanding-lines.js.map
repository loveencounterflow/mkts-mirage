{
  "version": 3,
  "file": "demo-expanding-lines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo-expanding-lines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/EXPERIMENTS/EXPANDING-LINES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\ntypes                     = require '../types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n{ assign\n  abspath\n  relpath }               = require '../helpers'\n#...........................................................................................................\nrequire                   '../exception-handler'\nMIRAGE                    = require '../..'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_level = ( me, vlnr ) ->\n  validate.nonempty_list vlnr\n  R = assign [], vlnr\n  R.push 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@advance = ( me, vlnr ) ->\n  validate.nonempty_list vlnr\n  R                     = assign [], vlnr\n  R[ vlnr.length - 1 ] += +1\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@translate_document = ( me ) ->\n  validate.object me\n  db2 = ( MIRAGE.new_settings me ).db\n  for row from me.db.read_unstamped_lines()\n    ### TAINT how to convert vlnr in ICQL? ###\n    old_vlnr  = JSON.parse row.vlnr\n    break if old_vlnr[ 0 ] > 10\n    next_vlnr = @new_level me, old_vlnr\n    unless isa.blank_text row.value\n      words     = row.value.split /\\s+/\n      urge \"processing line #{old_vlnr} (#{words.length} words)\"\n      for word in words\n        next_vlnr = @advance me, next_vlnr\n        # debug 'µ20209', next_vlnr\n        # me.db.insert_line { next_vlnr, }\n    # debug 'µ10021', rpr row.vlnr\n    db2.stamp_line { rowid: row.rowid, }\n  #.........................................................................................................\n  for row from me.db.read_lines()\n    color = if row.stamped then CND.grey else CND.green\n    info color \"#{row.rowid} #{row.vlnr} #{( if row.stamped then 'S' else ' ' )} #{rpr row.value[ .. 20 ]}\"\n  #.........................................................................................................\n  for row from me.db.xxx_select { rowid: 3, }\n    info row\n  #.........................................................................................................\n  for row from me.db.get_stats()\n    info row\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  testing = true\n  do =>\n    #.......................................................................................................\n    mirage = MIRAGE.new_settings '../README.md'\n    await MIRAGE.acquire      mirage\n    await @translate_document mirage\n    help 'ok'\n\n\n"
  ]
}