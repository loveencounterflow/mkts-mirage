// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, FS, MIRAGE, PATH, PD, abspath, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, relpath, rpr, select, size_of, stamp, testing, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS-MIRAGE/EXPERIMENTS/EXPANDING-LINES';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  ({assign, jr} = CND);

  first = Symbol('first');

  last = Symbol('last');

  types = require('../types');

  //...........................................................................................................
  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  ({assign, abspath, relpath} = require('../helpers'));

  //...........................................................................................................
  require('../exception-handler');

  MIRAGE = require('../..');

  //-----------------------------------------------------------------------------------------------------------
  this.new_level = function(me, vlnr) {
    var R;
    /* Given a `mirage` instance and a vectorial line number `vlnr`, return a copy of `vlnr`, call it
    `vlnr0`, which has an index of `0` appended, thus representing the pre-first `vlnr` for a level of lines
    derived from the one that the original `vlnr` pointed to. Call `advance mirage, vlnr0` to obtain the
    vectorial line number of the first line of the new level. */
    validate.nonempty_list(vlnr);
    R = assign([], vlnr);
    R.push(0);
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.advance = function(me, vlnr) {
    var R;
    /* Given a `mirage` instance and a vectorial line number `vlnr`, return a copy of `vlnr`, call it
    `vlnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the
    next line in the same level that is derived from the same line as its predecessor. */
    validate.nonempty_list(vlnr);
    R = assign([], vlnr);
    R[vlnr.length - 1] += +1;
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$split_words = function(S) {
    return $((d, send) => {
      var i, len, nxt_vlnr, prv_vlnr, ref, text, word;
      if (!select(d, '^mktscript')) {
        return send(d);
      }
      ({
        text,
        vlnr: prv_vlnr
      } = d.value);
      nxt_vlnr = this.new_level(S.mirage, prv_vlnr);
      ref = text.split(/\s+/);
      // unless isa.blank_text row.value
      for (i = 0, len = ref.length; i < len; i++) {
        word = ref[i];
        if (word === '') {
          continue;
        }
        nxt_vlnr = this.advance(S.mirage, nxt_vlnr);
        send(PD.new_event('^word', {
          text: word,
          vlnr: nxt_vlnr
        }));
      }
      return send(stamp(d));
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.feed_source = function(S, source, limit = 2e308) {
    /* TAINT how to convert vlnr in ICQL? */
    var dbr, nr, ref, row, vlnr, vlnr_txt;
    dbr = S.mirage.db;
    nr = 0;
    ref = dbr.read_unstamped_lines();
    for (row of ref) {
      nr += +1;
      if (nr > limit) {
        break;
      }
      vlnr_txt = row.vlnr;
      vlnr = JSON.parse(row.vlnr);
      source.send(PD.new_event(row.key, {
        text: row.value,
        vlnr,
        vlnr_txt,
        rowid: row.rowid
      }));
    }
    source.end();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$feed_db = function(S) {
    /* TAINT stopgap measure; should be implemented in ICQL */
    var db2;
    db2 = (MIRAGE.new_settings(S.mirage)).db;
    return $watch((d) => {
      if (!d.stamped) {
        return null;
      }
      /* TAINT how to convert vlnr in ICQL? */
      db2.stamp_line({
        vlnr: d.value.vlnr_txt
      });
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this._$show = function(S) {
    return $watch((d) => {
      var color;
      if (d.stamped) {
        color = CND.grey;
      } else {
        switch (d.key) {
          case '^word':
            color = CND.gold;
            break;
          default:
            color = CND.white;
        }
      }
      return info(color(jr(d)));
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this._$on_finish = function(S) {
    var dbr;
    dbr = S.mirage.db;
    //.........................................................................................................
    return $watch({last}, (d) => {
      var color, key, ref, ref1, row, vlnr;
      if (d !== last) {
        return null;
      }
      ref = dbr.read_lines();
      //.......................................................................................................
      for (row of ref) {
        color = row.stamped ? CND.grey : CND.green;
        key = row.key.padEnd(12);
        vlnr = row.vlnr.padEnd(12);
        info(color(`${vlnr} ${(row.stamped ? 'S' : ' ')} ${key} ${rpr(row.value.slice(0, 41))}`));
        if ((JSON.parse(row.vlnr))[0] > 20) {
          break;
        }
      }
      ref1 = dbr.get_stats();
      //.......................................................................................................
      for (row of ref1) {
        info(`${row.key}: ${row.count}`);
      }
      //.......................................................................................................
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.translate_document = function(me) {
    return new Promise((resolve, reject) => {
      var S, limit, pipeline, source;
      /* TAINT add suitable types */
      validate.object(me);
      S = {
        mirage: me
      };
      source = PD.new_push_source();
      limit = 12;
      //.........................................................................................................
      pipeline = [];
      pipeline.push(source);
      pipeline.push(this.$split_words(S));
      pipeline.push(this.$feed_db(S));
      pipeline.push(this._$show());
      pipeline.push(this._$on_finish(S));
      pipeline.push(PD.$drain(() => {
        return resolve();
      }));
      //.........................................................................................................
      PD.pull(...pipeline);
      this.feed_source(S, source, limit);
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    testing = true;
    (async() => {
      var mirage;
      //.......................................................................................................
      mirage = MIRAGE.new_settings('../README.md');
      await MIRAGE.acquire(mirage);
      await this.translate_document(mirage);
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=demo-expanding-lines.js.map
