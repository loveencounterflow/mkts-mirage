{
  "version": 3,
  "file": "vector-index-vidx.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/vector-index-vidx.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/EXPERIMENTS/VECTOR-INDEX'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\ntypes                     = require '../types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n{ assign\n  abspath\n  relpath }               = require '../helpers'\n#...........................................................................................................\nrequire                   '../exception-handler'\nMIRAGE                    = require '../..'\n\nprovide_H2CNANO = ->\n  #-----------------------------------------------------------------------------------------------------------\n  # _invert_buffer = ( buffer, idx ) ->\n  #   buffer[ i ] = ~buffer[ i ] for i in [ idx + 1 .. idx + 8 ]\n  #   return buffer\n\n  #-----------------------------------------------------------------------------------------------------------\n  @encode = ( vidx ) ->\n    buffer_length = vidx.length * 9\n    R             = Buffer.alloc buffer_length\n    bidx          = -8\n    for idx in vidx\n      bidx     += +8\n      R[ idx ]  = 'K' # for compatibility with H2C\n      R.writeDoubleBE idx, bidx + 1\n    # _invert_buffer rbuffer, idx if type is tm_nnumber\n    return R\n\n  ##########################################################################################################\n  return @\n\nprovide_UINT32 = ->\n  #-----------------------------------------------------------------------------------------------------------\n  @encode = ( vidx ) -> Uint32Array.from vidx\n\n  ##########################################################################################################\n  return @\n\n\nH2CNANO = provide_H2CNANO.apply {}\nUINT32  = provide_UINT32.apply {}\n\n#-----------------------------------------------------------------------------------------------------------\n@benchmark = ( settings ) ->\n  H2C = require '/media/flow/kamakura/home/flow/io/hollerith-codec'\n  #.........................................................................................................\n  h2c_encode      = ( vidx ) -> H2C.encode      JSON.parse vidx\n  h2cnano_encode  = ( vidx ) -> H2CNANO.encode  JSON.parse vidx\n  uint32_encode   = ( vidx ) -> UINT32.encode   JSON.parse vidx\n  vidx_encode     = ( vidx ) -> ( ( \"#{idx}\".padStart 6, '0' ) for idx in ( JSON.parse vidx ) ).join '-'\n  #.........................................................................................................\n  n       = 5e6\n  probes  = []\n  for nr in [ 1 .. n ]\n    vidx = ( ( CND.random_integer 1, n * 2 ) for i in [ 1 .. ( CND.random_integer 1, 5 ) ] )\n    probes.push JSON.stringify vidx\n  # #.........................................................................................................\n  # t0 = Date.now()\n  # for probe in probes\n  #   x = h2c_encode probe\n  # t1 = Date.now()\n  # debug 'µ33211-H2C', t1 - t0\n  # #.........................................................................................................\n  # t0 = Date.now()\n  # for probe in probes\n  #   x = h2cnano_encode probe\n  # t1 = Date.now()\n  # debug 'µ33211-H2CNANO', t1 - t0\n  #.........................................................................................................\n  t0 = Date.now()\n  for probe in probes\n    x = uint32_encode probe\n  t1 = Date.now()\n  debug 'µ33211-uint32', t1 - t0\n  #.........................................................................................................\n  t0 = Date.now()\n  for probe in probes\n    x = vidx_encode probe\n  t1 = Date.now()\n  debug 'µ33211-vidx', t1 - t0\n  #.........................................................................................................\n  # debug 'µ20092', probes\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@populate_db = ( settings ) ->\n  validate.object settings\n  S = settings\n  # D = S.db.$.db\n  # ( D.prepare \"drop table if exists xxx;\"               ).run()\n  # ( D.prepare \"create table xxx( d blob );\"             ).run()\n  # ( D.prepare \"insert into xxx values ( ? );\"           ).run [ ( Buffer.from '123' ), ]\n  # debug 'µ433344', [ ( D.prepare \"select * from xxx;\"   ).iterate()..., ]\n  S.db.vidx_create_and_populate_tables()\n  names = [\n    'vidx_list_unordered'\n    'vidx_list_ordered_with_cached'\n    'vidx_list_ordered_with_call' ]\n  for name in names\n    urge name\n    for row from S.db[ name ]()\n      info row.vidx\n\n\n############################################################################################################\nunless module.parent?\n  testing = true\n  do =>\n    #.......................................................................................................\n    settings = MIRAGE.new_settings '../README.md'\n    await MIRAGE.write_sql_cache      settings\n    await @populate_db                settings\n    # await @benchmark                  settings\n    help 'ok'\n\n\n"
  ]
}