// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, FS, MIRAGE, PATH, PD, abspath, assign, badge, debug, declare, echo, help, info, isa, jr, relpath, rpr, select, size_of, testing, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS-MIRAGE/EXPERIMENTS/VECTOR-INDEX';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  this._drop_extension = function(path) {
    return path.slice(0, path.length - (PATH.extname(path)).length);
  };

  types = require('../types');

  //...........................................................................................................
  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  ({assign, abspath, relpath} = require('../helpers'));

  //...........................................................................................................
  require('../exception-handler');

  MIRAGE = require('../..');

  //-----------------------------------------------------------------------------------------------------------
  this.populate_db = function(settings) {
    var S, i, len, name, names, results, row;
    validate.object(settings);
    S = settings;
    // D = S.db.$.db
    // ( D.prepare "drop table if exists xxx;"               ).run()
    // ( D.prepare "create table xxx( d blob );"             ).run()
    // ( D.prepare "insert into xxx values ( ? );"           ).run [ ( Buffer.from '123' ), ]
    // debug 'Âµ433344', [ ( D.prepare "select * from xxx;"   ).iterate()..., ]
    S.db.vidx_create_and_populate_tables();
    names = ['vidx_list_unordered', 'vidx_list_ordered_with_cached', 'vidx_list_ordered_with_call'];
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      urge(name);
      results.push((function() {
        var ref, results1;
        ref = S.db[name]();
        results1 = [];
        for (row of ref) {
          results1.push(info(row.vidx));
        }
        return results1;
      })());
    }
    return results;
  };

  //###########################################################################################################
  if (module.parent == null) {
    testing = true;
    (async() => {
      var settings;
      //.......................................................................................................
      settings = MIRAGE.new_settings('../README.md');
      await MIRAGE.write_sql_cache(settings);
      await this.populate_db(settings);
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=vector-index-vidx.js.map
