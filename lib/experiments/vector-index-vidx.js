// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, FS, H2CNANO, MIRAGE, PATH, PD, UINT32, abspath, assign, badge, debug, declare, echo, help, info, isa, jr, provide_H2CNANO, provide_UINT32, relpath, rpr, select, size_of, testing, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS-MIRAGE/EXPERIMENTS/VECTOR-INDEX';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  this._drop_extension = function(path) {
    return path.slice(0, path.length - (PATH.extname(path)).length);
  };

  types = require('../types');

  //...........................................................................................................
  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  ({assign, abspath, relpath} = require('../helpers'));

  //...........................................................................................................
  require('../exception-handler');

  MIRAGE = require('../..');

  provide_H2CNANO = function() {
    //-----------------------------------------------------------------------------------------------------------
    // _invert_buffer = ( buffer, idx ) ->
    //   buffer[ i ] = ~buffer[ i ] for i in [ idx + 1 .. idx + 8 ]
    //   return buffer

    //-----------------------------------------------------------------------------------------------------------
    this.encode = function(vidx) {
      var R, bidx, buffer_length, idx, j, len;
      buffer_length = vidx.length * 9;
      R = Buffer.alloc(buffer_length);
      bidx = -8;
      for (j = 0, len = vidx.length; j < len; j++) {
        idx = vidx[j];
        bidx += +8;
        R[idx] = 'K'; // for compatibility with H2C
        R.writeDoubleBE(idx, bidx + 1);
      }
      // _invert_buffer rbuffer, idx if type is tm_nnumber
      return R;
    };
    //#########################################################################################################
    return this;
  };

  provide_UINT32 = function() {
    //-----------------------------------------------------------------------------------------------------------
    this.encode = function(vidx) {
      return Uint32Array.from(vidx);
    };
    //#########################################################################################################
    return this;
  };

  H2CNANO = provide_H2CNANO.apply({});

  UINT32 = provide_UINT32.apply({});

  //-----------------------------------------------------------------------------------------------------------
  this.benchmark = function(settings) {
    var H2C, h2c_encode, h2cnano_encode, i, j, k, l, len, len1, n, nr, probe, probes, ref, t0, t1, uint32_encode, vidx, vidx_encode, x;
    H2C = require('/media/flow/kamakura/home/flow/io/hollerith-codec');
    //.........................................................................................................
    h2c_encode = function(vidx) {
      return H2C.encode(JSON.parse(vidx));
    };
    h2cnano_encode = function(vidx) {
      return H2CNANO.encode(JSON.parse(vidx));
    };
    uint32_encode = function(vidx) {
      return UINT32.encode(JSON.parse(vidx));
    };
    vidx_encode = function(vidx) {
      var idx;
      return ((function() {
        var j, len, ref, results;
        ref = JSON.parse(vidx);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          idx = ref[j];
          results.push(`${idx}`.padStart(6, '0'));
        }
        return results;
      })()).join('-');
    };
    //.........................................................................................................
    n = 5e6;
    probes = [];
    for (nr = j = 1, ref = n; (1 <= ref ? j <= ref : j >= ref); nr = 1 <= ref ? ++j : --j) {
      vidx = (function() {
        var k, ref1, results;
        results = [];
        for (i = k = 1, ref1 = CND.random_integer(1, 5); (1 <= ref1 ? k <= ref1 : k >= ref1); i = 1 <= ref1 ? ++k : --k) {
          results.push(CND.random_integer(1, n * 2));
        }
        return results;
      })();
      probes.push(JSON.stringify(vidx));
    }
    // #.........................................................................................................
    // t0 = Date.now()
    // for probe in probes
    //   x = h2c_encode probe
    // t1 = Date.now()
    // debug 'µ33211-H2C', t1 - t0
    // #.........................................................................................................
    // t0 = Date.now()
    // for probe in probes
    //   x = h2cnano_encode probe
    // t1 = Date.now()
    // debug 'µ33211-H2CNANO', t1 - t0
    //.........................................................................................................
    t0 = Date.now();
    for (k = 0, len = probes.length; k < len; k++) {
      probe = probes[k];
      x = uint32_encode(probe);
    }
    t1 = Date.now();
    debug('µ33211-uint32', t1 - t0);
    //.........................................................................................................
    t0 = Date.now();
    for (l = 0, len1 = probes.length; l < len1; l++) {
      probe = probes[l];
      x = vidx_encode(probe);
    }
    t1 = Date.now();
    debug('µ33211-vidx', t1 - t0);
    //.........................................................................................................
    // debug 'µ20092', probes
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.populate_db = function(settings) {
    var S, j, len, name, names, results, row;
    validate.object(settings);
    S = settings;
    // D = S.db.$.db
    // ( D.prepare "drop table if exists xxx;"               ).run()
    // ( D.prepare "create table xxx( d blob );"             ).run()
    // ( D.prepare "insert into xxx values ( ? );"           ).run [ ( Buffer.from '123' ), ]
    // debug 'µ433344', [ ( D.prepare "select * from xxx;"   ).iterate()..., ]
    S.db.vidx_create_and_populate_tables();
    names = ['vidx_list_unordered', 'vidx_list_ordered_with_cached', 'vidx_list_ordered_with_call'];
    results = [];
    for (j = 0, len = names.length; j < len; j++) {
      name = names[j];
      urge(name);
      results.push((function() {
        var ref, results1;
        ref = S.db[name]();
        results1 = [];
        for (row of ref) {
          results1.push(info(row.vidx));
        }
        return results1;
      })());
    }
    return results;
  };

  //###########################################################################################################
  if (module.parent == null) {
    testing = true;
    (async() => {
      var settings;
      //.......................................................................................................
      settings = MIRAGE.new_settings('../README.md');
      await MIRAGE.write_sql_cache(settings);
      await this.populate_db(settings);
      // await @benchmark                  settings
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=vector-index-vidx.js.map
