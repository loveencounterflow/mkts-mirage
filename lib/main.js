// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, FS, MIRAGE, PATH, PD, TMP, _$count, abspath, as_sql, assign, badge, debug, declare, echo, help, info, isa, jr, last_of, relpath, rpr, select, size_of, type_of, types, urge, validate, warn, whisper,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS-MIRAGE/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  this._drop_extension = function(path) {
    return path.slice(0, path.length - (PATH.extname(path)).length);
  };

  types = require('./types');

  //...........................................................................................................
  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  ({assign, abspath, relpath} = require('./helpers'));

  //...........................................................................................................
  require('./exception-handler');

  TMP = require('tmp-promise');

  //-----------------------------------------------------------------------------------------------------------
  last_of = function(x) {
    return x[(size_of(x)) - 1];
  };

  this.$as_line = () => {
    return $((line, send) => {
      return send(line + '\n');
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  as_sql = function(x) {
    var R;
    validate.text(x);
    R = x;
    R = R.replace(/'/g, "''");
    return `'${R}'`;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$as_sql = () => {
    var first, is_first_record, last, lnr;
    first = Symbol('first');
    last = Symbol('last');
    is_first_record = true;
    lnr = 0;
    return $({first, last}, (line, send) => {
      var comma;
      //.......................................................................................................
      /* TAINT consider to store SQL as `fragment`s in `mkts.icql` */
      if (line === first) {
        send("drop table if exists main;");
        send("create table main ( ");
        send("    vlnr_txt  json,");
        // send "    vlnr_txt  json unique,"
        send("    stamped   boolean default false,");
        send("    key       text default '^mktscript',");
        send("    value     text );");
        return send("insert into main ( vlnr_txt, value ) values");
      //.......................................................................................................
      } else if (line === last) {
        return send(";");
      } else {
        // send "create unique index idx_main_lnr on main ( lnr );"
        //.......................................................................................................
        lnr += +1;
        comma = is_first_record ? '' : ',';
        is_first_record = false;
        return send(`${comma}( '[${lnr}]', ${as_sql(line)} )`);
      }
    });
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$tee_write_sql = (target_path_sql) => {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$as_sql());
    pipeline.push(this.$as_line());
    pipeline.push(PD.write_to_file(target_path_sql));
    return PD.$tee(PD.pull(...pipeline));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.write_sql_cache = function(settings) {
    return new Promise((resolve, reject) => {
      var S, pipeline;
      validate.object(settings);
      S = settings;
      help(`${rpr(S.rel_source_path)} -> ${S.rel_target_path}`);
      //.........................................................................................................
      pipeline = [];
      pipeline.push(PD.read_from_file(S.source_path));
      pipeline.push(PD.$split());
      pipeline.push(this.$tee_write_sql(S.target_path_sql));
      pipeline.push(PD.$drain(() => {
        help(`wrote output to ${rpr(S.rel_target_path)}`);
        return resolve();
      }));
      PD.pull(...pipeline);
      //.........................................................................................................
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  _$count = function(step) {
    var nr;
    nr = 0;
    return PD.$watch((d) => {
      nr += +1;
      if ((modulo(nr, step)) === 0) {
        whisper('µ44744', nr);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.populate_db = function(settings) {
    return new Promise((resolve, reject) => {
      var S, line_count;
      validate.object(settings);
      S = settings;
      S.db.$.read(S.target_path_sql);
      // for row from S.db.read_lines { limit: 10, }
      //   info jr row
      line_count = S.db.$.first_value(S.db.count_lines());
      info(`MKTS document ${rpr(S.rel_source_path)} has ${line_count} lines`);
      return resolve();
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cleanup = function(settings) {
    return new Promise((resolve, reject) => {
      settings.remove_tmpfile();
      return resolve();
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_settings = function(settings) {
    var R, isa_text, ref, tmp;
    validate.true((isa_text = isa.text(settings)) || (isa.object(settings)));
    if (isa_text) {
      settings = {
        source_path: settings
      };
    }
    tmp = TMP.fileSync();
    R = {};
    R.db = (require('./db')).new_db({
      clear: false
    });
    R.testing = (ref = settings.testing) != null ? ref : false;
    R.tmpfile_path = tmp.name;
    R.remove_tmpfile = tmp.removeCallback;
    R.target_path_sql = R.tmpfile_path;
    R.source_path = settings.source_path;
    R.rel_source_path = relpath(R.source_path);
    R.rel_target_path = relpath(R.target_path_sql);
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.acquire = function(settings) {
    return new Promise(async(resolve, reject) => {
      try {
        await this.write_sql_cache(settings);
        await this.populate_db(settings);
      } finally {
        await this.cleanup(settings);
      }
      return resolve();
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    MIRAGE = this;
    (async function() {
      var settings;
      //.......................................................................................................
      settings = MIRAGE.new_settings('./README.md');
      await MIRAGE.acquire(settings);
      delete settings.db;
      debug('µ69688', settings);
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=main.js.map
