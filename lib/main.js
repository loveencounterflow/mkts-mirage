// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, FS, MIRAGE, PATH, PD, _$count, _drop_extension, as_sql, assign, badge, cwd_abspath, cwd_relpath, debug, declare, echo, help, here_abspath, info, isa, jr, last_of, project_abspath, rpr, select, size_of, type_of, urge, validate, warn, whisper,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS-MIRAGE/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  ({cwd_abspath, cwd_relpath, here_abspath, _drop_extension, project_abspath} = require('./helpers'));

  this.types = require('./types');

  //...........................................................................................................
  ({isa, validate, declare, size_of, last_of, type_of} = this.types);

  //...........................................................................................................
  require('./exception-handler');

  //-----------------------------------------------------------------------------------------------------------
  as_sql = function(x) {
    var R;
    validate.text(x);
    R = x;
    R = R.replace(/'/g, "''");
    return `'${R}'`;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$as_sql = (S) => {
    var lnr;
    lnr = 0;
    return $((d, send) => {
      var comma, is_first, is_last, line, ref, ref1;
      validate.text((line = d.value));
      is_first = (ref = d.$first) != null ? ref : false;
      is_last = (ref1 = d.$last) != null ? ref1 : false;
      //.......................................................................................................
      /* TAINT consider to store SQL as `fragment`s in `mkts.icql` */
      if (is_first) {
        send("drop table if exists main;");
        send("create table main ( ");
        // send "    vnr_txt   json,"
        send("    vnr_txt   json unique,");
        send("    stamped   boolean default false,");
        send(`    key       text default ${as_sql(S.default_key)},`);
        send("    text      text,");
        send("    p         json default 'null' );");
        send("insert into main ( vnr_txt, text ) values");
      }
      // send "create unique index idx_main_lnr on main ( lnr );"
      //.......................................................................................................
      lnr += +1;
      comma = is_last ? '' : ',';
      send(`( '[${lnr}]', ${as_sql(line)} )${comma}`);
      //.......................................................................................................
      if (is_last) {
        return send(";");
      }
    });
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._$tee_without_filter = function(bystream) {
    /* Given a `bystream`, send a data down both the mainstream and the bystream. This allows e.g. to log all
    events to a file sink while continuing to process the same data in the mainline. **NB** that in
    contradistinction to `pull-tee`, you can only divert to a single by-stream with each call to `PS.$tee` */
    return (require('pull-tee'))(bystream);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$tee_compile_sql = (S, handler) => {
    var collector, pipeline;
    collector = [];
    pipeline = [];
    pipeline.push(PD.$add_position());
    pipeline.push(this.$as_sql(S));
    // pipeline.push @$as_line()
    pipeline.push(PD.$collect({collector}));
    pipeline.push(PD.$drain(function() {
      return handler(null, collector.join('\n'));
    }));
    return PD.$tee(PD.pull(...pipeline));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.compile_sql = function(settings) {
    return new Promise((resolve, reject) => {
      var S, pipeline;
      validate.object(settings);
      S = settings;
      // help "µ12311-1 reading #{rpr S.file_path}"
      //.........................................................................................................
      pipeline = [];
      pipeline.push(PD.read_from_file(S.file_path));
      pipeline.push(PD.$split());
      pipeline.push(this.$tee_compile_sql(S, (error, sql) => {
        return resolve(sql);
      }));
      pipeline.push(PD.$drain());
      PD.pull(...pipeline);
      //.........................................................................................................
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  _$count = function(step) {
    var nr;
    nr = 0;
    return PD.$watch((d) => {
      nr += +1;
      if ((modulo(nr, step)) === 0) {
        whisper('µ44744', nr);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.populate_db = function(me, sql) {
    return new Promise((resolve, reject) => {
      validate.object(me);
      me.db.$.execute(sql);
      return resolve({
        line_count: me.db.$.first_value(me.db.count_lines())
      });
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cleanup = function(settings) {
    return new Promise((resolve, reject) => {
      settings.remove_tmpfile();
      return resolve();
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.create = function(settings) {
    return new Promise(async(resolve, reject) => {
      var line_count, me, ref, sql;
      validate.mirage_create_settings(settings);
      me = {};
      me.db = (require('./db')).new_db(settings);
      me.dbr = me.db;
      me.dbw = (require('./db')).new_db(settings);
      me.file_path = cwd_abspath(settings.file_path);
      me.rel_file_path = cwd_relpath(me.file_path);
      me.default_key = (ref = settings.default_key) != null ? ref : '^line';
      sql = (await this.compile_sql(me));
      ({line_count} = (await this.populate_db(me, sql)));
      return resolve(me);
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    MIRAGE = this;
    (async function() {
      var mirage, settings;
      //.......................................................................................................
      settings = {
        // file_path:  './README.md'
        file_path: '/usr/share/dict/italian',
        db_path: '/tmp/mirage.db',
        icql_path: './db/mkts.icql'
      };
      mirage = (await MIRAGE.create(settings));
      // delete mirage.db
      // debug 'µ69688', mirage
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=main.js.map
