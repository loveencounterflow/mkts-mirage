{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  _drop_extension\n  project_abspath }       = require './helpers'\n@types                    = require './types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  last_of\n  type_of }               = @types\n#...........................................................................................................\nrequire                   './exception-handler'\n\n\n#-----------------------------------------------------------------------------------------------------------\nas_sql = ( x ) ->\n  validate.text x\n  R = x\n  R = R.replace /'/g, \"''\"\n  return \"'#{R}'\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_sql = =>\n  first           = Symbol 'first'\n  last            = Symbol 'last'\n  is_first_record = true\n  lnr             = 0\n  return $ { first, last, }, ( line, send ) =>\n    #.......................................................................................................\n    ### TAINT consider to store SQL as `fragment`s in `mkts.icql` ###\n    if line is first\n      send \"drop table if exists main;\"\n      send \"create table main ( \"\n      # send \"    vnr_txt   json,\"\n      send \"    vnr_txt   json unique,\"\n      send \"    stamped   boolean default false,\"\n      send \"    key       text default '^mktscript',\"\n      send \"    text      text,\"\n      send \"    p         json default 'null' );\"\n      send \"insert into main ( vnr_txt, text ) values\"\n    #.......................................................................................................\n    else if line is last\n      send \";\"\n      # send \"create unique index idx_main_lnr on main ( lnr );\"\n    #.......................................................................................................\n    else\n      lnr  += +1\n      comma = if is_first_record then '' else ','\n      is_first_record = false\n      send \"\"\"#{comma}( '[#{lnr}]', #{as_sql line} )\"\"\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_$tee_without_filter = ( bystream ) ->\n  ### Given a `bystream`, send a data down both the mainstream and the bystream. This allows e.g. to log all\n  events to a file sink while continuing to process the same data in the mainline. **NB** that in\n  contradistinction to `pull-tee`, you can only divert to a single by-stream with each call to `PS.$tee` ###\n  return ( require 'pull-tee' ) bystream\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_compile_sql = ( target_path_sql, handler ) =>\n  collector = []\n  pipeline  = []\n  pipeline.push @$as_sql()\n  # pipeline.push @$as_line()\n  pipeline.push PD.$collect { collector, }\n  pipeline.push PD.$drain -> handler null, collector.join '\\n'\n  return PD.$tee PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@compile_sql = ( settings ) -> new Promise ( resolve, reject ) =>\n  validate.object settings\n  S = settings\n  # help \"Âµ12311-1 reading #{rpr S.file_path}\"\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push PD.read_from_file S.file_path\n  pipeline.push PD.$split()\n  pipeline.push @$tee_compile_sql S, ( error, sql ) => resolve sql\n  pipeline.push PD.$drain()\n  PD.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_$count = ( step ) ->\n  nr = 0\n  return PD.$watch ( d ) =>\n    nr += +1\n    if ( nr %% step ) is 0\n      whisper 'Âµ44744', nr\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@populate_db = ( me, sql ) -> new Promise ( resolve, reject ) =>\n  validate.object me\n  me.db.$.execute sql\n  resolve { line_count: me.db.$.first_value me.db.count_lines(), }\n\n#-----------------------------------------------------------------------------------------------------------\n@cleanup = ( settings ) -> new Promise ( resolve, reject ) =>\n  settings.remove_tmpfile()\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\n@create = ( settings ) -> new Promise ( resolve, reject ) =>\n  validate.mirage_create_settings settings\n  me                      = {}\n  me.db                   = ( require './db' ).new_db settings\n  me.dbr                  = me.db\n  me.dbw                  = ( require './db' ).new_db settings\n  me.file_path            = cwd_abspath settings.file_path\n  me.rel_file_path        = cwd_relpath me.file_path\n  sql                     = await @compile_sql me\n  { line_count, }         = await @populate_db me, sql\n  resolve me\n\n\n############################################################################################################\nunless module.parent?\n  MIRAGE  = @\n  do ->\n    #.......................................................................................................\n    settings =\n      file_path:  './README.md'\n      db_path:    '/tmp/mirage.db'\n      icql_path:  './db/mkts.icql'\n    mirage = await MIRAGE.create settings\n    # delete mirage.db\n    # debug 'Âµ69688', mirage\n    help 'ok'\n\n\n"
  ]
}