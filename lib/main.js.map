{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n{ assign\n  jr }                    = CND\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  _drop_extension\n  project_abspath }       = require './helpers'\n@types                    = require './types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  last_of\n  type_of }               = @types\n\n#-----------------------------------------------------------------------------------------------------------\n@_readable_stream_from_text = ( text ) ->\n  ### thx to https://stackoverflow.com/a/22085851/7568091 ###\n  R = new ( require 'stream' ).Readable()\n  R._read = () => {} # redundant?\n  R.push text\n  R.push null\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@compile_sql = ( settings ) -> new Promise ( resolve, reject ) =>\n  READLINE        = require 'readline'\n  S               = settings\n  #.........................................................................................................\n  default_dest    = S.default_dest\n  default_key     = S.default_key\n  default_realm   = S.default_realm\n  path            = S.file_path ? '<text>'\n  #.........................................................................................................\n  if isa.text S.file_path then  input = FS.createReadStream         S.file_path\n  else                          input = @_readable_stream_from_text S.text\n  ### NOTE use crlfDelay option to recognize all instances of CRLF as a single line break ###\n  reader          = READLINE.createInterface { input, crlfDelay: Infinity, }\n  preamble        = []\n  data            = []\n  lnr             = 0\n  preamble.push S.db.create_table_main_first { path, default_dest, default_key, default_realm, }\n  #.........................................................................................................\n  for await text from reader\n    lnr++\n    data[ last_idx ] += ',' if ( last_idx = data.length - 1 ) > -1\n    vnr               = [ lnr, ]\n    data.push ( S.db.create_table_main_middle { vnr, text, } )\n  if ( last_idx = data.length - 1 ) > -1\n    data[ last_idx ] = data[ last_idx ].replace /,$/g, ''\n  #.........................................................................................................\n  resolve [ preamble..., data..., ';', ].join '\\n'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@populate_db = ( me, sql ) -> new Promise ( resolve, reject ) =>\n  validate.object me\n  me.db.$.execute sql\n  resolve { line_count: me.db.$.first_value me.db.count_lines(), }\n\n#-----------------------------------------------------------------------------------------------------------\n@create = ( settings ) -> new Promise ( resolve, reject ) =>\n  validate.mirage_create_settings settings\n  me                      = {}\n  me.db                   = ( require './db' ).new_db settings\n  me.dbr                  = me.db\n  me.dbw                  = ( require './db' ).new_db settings\n  if settings.file_path?\n    me.text                 = null\n    me.file_path            = cwd_abspath settings.file_path\n    me.rel_file_path        = cwd_relpath me.file_path\n  else\n    me.text                 = settings.text\n    me.file_path            = null\n    me.rel_file_path        = null\n  me.default_dest         = settings.default_dest   ? 'main'\n  me.default_key          = settings.default_key    ? '^line'\n  me.default_realm        = settings.default_realm  ? 'input'\n  sql                     = await @compile_sql me\n  { line_count, }         = await @populate_db me, sql\n  me.line_count           = line_count\n  resolve me\n\n\n############################################################################################################\nunless module.parent?\n  MIRAGE  = @\n  do ->\n    #.......................................................................................................\n    settings =\n      # file_path:  './README.md'\n      # file_path:  __filename\n      file_path:  '/usr/share/dict/italian'\n      # text:       \"\"\"\n      #   helo world!\n      #   some literal text\n      #   \"\"\"\n      # file_path:  './db/demo.txt'\n      db_path:    './db/mkts.db'\n      icql_path:  './db/mkts.icql'\n    t0      = Date.now()\n    mirage  = await MIRAGE.create settings\n    t1      = Date.now()\n    dts     = ( ( t1 - t0 ) / 1000 ).toFixed 3\n    help 'µ77787', \"read #{mirage.line_count} lines in #{dts} s\"\n    count = 0\n    for row from mirage.db.read_lines()\n      count++\n      break if count > 5\n      delete row.vnr_blob\n      info 'µ33211', jr row\n    help 'ok'\n\n\n"
  ]
}