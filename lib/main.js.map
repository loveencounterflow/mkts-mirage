{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\ntypes                     = require './types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n{ assign\n  abspath\n  relpath }               = require './helpers'\n#...........................................................................................................\nrequire                   './exception-handler'\nTMP                       = require 'tmp-promise'\n\n\n#-----------------------------------------------------------------------------------------------------------\nlast_of   = ( x ) -> x[ ( size_of x ) - 1 ]\n@$as_line = => $ ( line, send ) => send line + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\nas_sql = ( x ) ->\n  validate.text x\n  R = x\n  R = R.replace /'/g, \"''\"\n  return \"'#{R}'\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_sql = =>\n  first           = Symbol 'first'\n  last            = Symbol 'last'\n  is_first_record = true\n  lnr             = 0\n  return $ { first, last, }, ( line, send ) =>\n    #.......................................................................................................\n    ### TAINT consider to store SQL as `fragment`s in `mkts.icql` ###\n    if line is first\n      send \"drop table if exists main;\"\n      send \"create table main ( \"\n      send \"    vlnr      json unique,\"\n      send \"    stamped   boolean default false,\"\n      send \"    key       text default '^mktscript',\"\n      send \"    value     text );\"\n      send \"insert into main ( vlnr, value ) values\"\n    #.......................................................................................................\n    else if line is last\n      send \";\"\n      # send \"create unique index idx_main_lnr on main ( lnr );\"\n    #.......................................................................................................\n    else\n      lnr  += +1\n      comma = if is_first_record then '' else ','\n      is_first_record = false\n      send \"\"\"#{comma}( \"[#{lnr}]\", #{as_sql line} )\"\"\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_write_sql = ( target_path_sql ) =>\n  pipeline = []\n  pipeline.push @$as_sql()\n  pipeline.push @$as_line()\n  pipeline.push PD.write_to_file target_path_sql\n  return PD.$tee PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@write_sql_cache = ( settings ) -> new Promise ( resolve, reject ) =>\n  validate.object settings\n  S = settings\n  help \"#{rpr S.rel_source_path} -> #{S.rel_target_path}\"\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push PD.read_from_file S.source_path\n  pipeline.push PD.$split()\n  pipeline.push @$tee_write_sql S.target_path_sql\n  pipeline.push PD.$drain =>\n    help \"wrote output to #{rpr S.rel_target_path}\"\n    resolve()\n  PD.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_$count = ( step ) ->\n  nr = 0\n  return PD.$watch ( d ) =>\n    nr += +1\n    if ( nr %% step ) is 0\n      whisper 'µ44744', nr\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@populate_db = ( settings ) -> new Promise ( resolve, reject ) =>\n  validate.object settings\n  S = settings\n  S.db.$.read S.target_path_sql\n  # for row from S.db.read_lines { limit: 10, }\n  #   info jr row\n  line_count = S.db.$.first_value S.db.count_lines()\n  info \"MKTS document #{rpr S.rel_source_path} has #{line_count} lines\"\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\n@cleanup = ( settings ) -> new Promise ( resolve, reject ) =>\n  settings.remove_tmpfile()\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\n@new_settings = ( settings ) ->\n  validate.true ( isa_text = isa.text settings ) or ( isa.object settings )\n  settings = { source_path: settings, } if isa_text\n  tmp                     = TMP.fileSync()\n  R                       = {}\n  R.db                    = ( require './db' ).new_db { clear: false, }\n  R.testing               = settings.testing ? false\n  R.tmpfile_path          = tmp.name\n  R.remove_tmpfile        = tmp.removeCallback\n  R.target_path_sql       = R.tmpfile_path\n  R.source_path           = settings.source_path\n  R.rel_source_path       = relpath R.source_path\n  R.rel_target_path       = relpath R.target_path_sql\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@acquire = ( settings ) -> new Promise ( resolve, reject ) =>\n  try\n    await @write_sql_cache  settings\n    await @populate_db      settings\n  finally\n    await @cleanup          settings\n  resolve()\n\n############################################################################################################\nunless module.parent?\n  MIRAGE  = @\n  do ->\n    #.......................................................................................................\n    settings = MIRAGE.new_settings './README.md'\n    await MIRAGE.acquire settings\n    delete settings.db\n    debug 'µ69688', settings\n    help 'ok'\n\n\n"
  ]
}